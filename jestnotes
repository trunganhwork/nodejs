Be sure to return (or await) the promise - if you omit the return/await statement, your
  test will complete before the promise returned from fetchData resolves or rejects.
test('Async await', () => {
  await/return expect(fetchdata()).toEqual('peanut butters');
});

test('the data is peanut butter', () => {
  function callback(error, data) {
    if (error) {
      throw error;
    }
    expect(data).toBe('peanut butter');
  }
  fetchData(callback);
});
The test will complete as soon as fetchData is completed without calling callback
add done function
test('', done => {
  function callback(error, data){
    if (error){
      throw error;
      done();
    }
    expect(data).toBe('peanut butter');
    done();
  }
});
If we want to see in the test log why it failed, we have to wrap expect in a try block 
  and pass the error in the catch block to done
